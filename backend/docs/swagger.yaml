basePath: /api/v1
definitions:
  ent.Book:
    properties:
      Author:
        description: Author holds the value of the "Author" field.
        type: string
      BOOK_ID:
        description: BOOKID holds the value of the "BOOK_ID" field.
        type: integer
      BOOK_NAME:
        description: BOOKNAME holds the value of the "BOOK_NAME" field.
        type: string
      edges:
        $ref: '#/definitions/ent.BookEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the BookQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.BookBorrow:
    properties:
      ADDED_TIME:
        description: ADDEDTIME holds the value of the "ADDED_TIME" field.
        type: string
      BOOKBORROW_ID:
        description: BOOKBORROWID holds the value of the "BOOKBORROW_ID" field.
        type: integer
      edges:
        $ref: '#/definitions/ent.BookBorrowEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the BookBorrowQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.BookBorrowEdges:
    properties:
      book:
        $ref: '#/definitions/ent.Book'
        description: BOOK holds the value of the BOOK edge.
        type: object
      owner:
        $ref: '#/definitions/ent.User'
        description: Owner holds the value of the Owner edge.
        type: object
      purpose:
        $ref: '#/definitions/ent.Purpose'
        description: PURPOSE holds the value of the PURPOSE edge.
        type: object
    type: object
  ent.BookEdges:
    properties:
      booklist:
        description: Booklist holds the value of the Booklist edge.
        items:
          $ref: '#/definitions/ent.BookBorrow'
        type: array
    type: object
  ent.Purpose:
    properties:
      PURPOSE_ID:
        description: PURPOSEID holds the value of the "PURPOSE_ID" field.
        type: integer
      PURPOSE_NAME:
        description: PURPOSENAME holds the value of the "PURPOSE_NAME" field.
        type: string
      edges:
        $ref: '#/definitions/ent.PurposeEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the PurposeQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.PurposeEdges:
    properties:
      booklist:
        description: Booklist holds the value of the Booklist edge.
        items:
          $ref: '#/definitions/ent.BookBorrow'
        type: array
    type: object
  ent.Role:
    properties:
      ROLE_ID:
        description: ROLEID holds the value of the "ROLE_ID" field.
        type: integer
      ROLE_NAME:
        description: ROLENAME holds the value of the "ROLE_NAME" field.
        type: string
      edges:
        $ref: '#/definitions/ent.RoleEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the RoleQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.RoleEdges:
    properties:
      role:
        description: Role holds the value of the Role edge.
        items:
          $ref: '#/definitions/ent.User'
        type: array
    type: object
  ent.User:
    properties:
      USER_EMAIL:
        description: USEREMAIL holds the value of the "USER_EMAIL" field.
        type: string
      USER_ID:
        description: USERID holds the value of the "USER_ID" field.
        type: integer
      USER_NAME:
        description: USERNAME holds the value of the "USER_NAME" field.
        type: string
      edges:
        $ref: '#/definitions/ent.UserEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the UserQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.UserEdges:
    properties:
      booklist:
        description: Booklist holds the value of the Booklist edge.
        items:
          $ref: '#/definitions/ent.BookBorrow'
        type: array
      role:
        $ref: '#/definitions/ent.Role'
        description: Role holds the value of the Role edge.
        type: object
    type: object
  gin.H:
    additionalProperties: true
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for SUT SE 2563
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: SUT SA Example API Playlist Vidoe
  version: "1.0"
paths:
  /Book:
    get:
      description: list Book entities
      operationId: list-Book
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Book'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List Book entities
    post:
      consumes:
      - application/json
      description: Create Book
      operationId: create-Book
      parameters:
      - description: Book entity
        in: body
        name: Book
        required: true
        schema:
          $ref: '#/definitions/ent.Book'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create Book
  /Book/{id}:
    delete:
      description: get Book by ID
      operationId: delete-Book
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a Book entity by ID
    put:
      consumes:
      - application/json
      description: update Book by ID
      operationId: update-Book
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: Book entity
        in: body
        name: Book
        required: true
        schema:
          $ref: '#/definitions/ent.Book'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a Book entity by ID
  /BookBorrow:
    get:
      description: list BookBorrow entities
      operationId: list-BookBorrow
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.BookBorrow'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List BookBorrow entities
    post:
      consumes:
      - application/json
      description: Create BookBorrow
      operationId: create-BookBorrow
      parameters:
      - description: BookBorrow entity
        in: body
        name: BookBorrow
        required: true
        schema:
          $ref: '#/definitions/ent.BookBorrow'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.BookBorrow'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create BookBorrow
  /BookBorrow/{id}:
    delete:
      description: get BookBorrow by ID
      operationId: delete-BookBorrow
      parameters:
      - description: BookBorrow ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a BookBorrow entity by ID
    get:
      description: get BookBorrow by ID
      operationId: get-BookBorrow
      parameters:
      - description: BookBorrow ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.BookBorrow'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a BookBorrow entity by ID
    put:
      consumes:
      - application/json
      description: update BookBorrow by ID
      operationId: update-BookBorrow
      parameters:
      - description: BookBorrow ID
        in: path
        name: id
        required: true
        type: integer
      - description: BookBorrow entity
        in: body
        name: BookBorrow
        required: true
        schema:
          $ref: '#/definitions/ent.BookBorrow'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.BookBorrow'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a BookBorrow entity by ID
  /Books/{id}:
    get:
      description: get Book by ID
      operationId: get-Book
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a Book entity by ID
  /Purpose:
    get:
      description: list Purpose entities
      operationId: list-Purpose
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Purpose'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List Purpose entities
    post:
      consumes:
      - application/json
      description: Create Purpose
      operationId: create-Purpose
      parameters:
      - description: Purpose entity
        in: body
        name: Purpose
        required: true
        schema:
          $ref: '#/definitions/ent.Purpose'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Purpose'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create Purpose
  /Purpose/{id}:
    delete:
      description: get Purpose by ID
      operationId: delete-Purpose
      parameters:
      - description: Purpose ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a Purpose entity by ID
    put:
      consumes:
      - application/json
      description: update Purpose by ID
      operationId: update-Purpose
      parameters:
      - description: Purpose ID
        in: path
        name: id
        required: true
        type: integer
      - description: Purpose entity
        in: body
        name: Purpose
        required: true
        schema:
          $ref: '#/definitions/ent.Purpose'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Purpose'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a Purpose entity by ID
  /Purposes/{id}:
    get:
      description: get Purpose by ID
      operationId: get-Purpose
      parameters:
      - description: Purpose ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Purpose'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a Purpose entity by ID
  /Role:
    get:
      description: list Role entities
      operationId: list-Role
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Role'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List Role entities
    post:
      consumes:
      - application/json
      description: Create Role
      operationId: create-Role
      parameters:
      - description: Role entity
        in: body
        name: Role
        required: true
        schema:
          $ref: '#/definitions/ent.Role'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Role'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create Role
  /Role/{id}:
    delete:
      description: get Role by ID
      operationId: delete-PRole
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a Role entity by ID
    put:
      consumes:
      - application/json
      description: update Role by ID
      operationId: update-Role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: Role entity
        in: body
        name: Role
        required: true
        schema:
          $ref: '#/definitions/ent.Role'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Role'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a Role entity by ID
  /Roles/{id}:
    get:
      description: get Role by ID
      operationId: get-Role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Role'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a Role entity by ID
  /users:
    get:
      description: list user entities
      operationId: list-user
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List user entities
    post:
      consumes:
      - application/json
      description: Create user
      operationId: create-user
      parameters:
      - description: User entity
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/ent.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create user
  /users/{id}:
    delete:
      description: get user by ID
      operationId: delete-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a user entity by ID
    get:
      description: get user by ID
      operationId: get-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a user entity by ID
    put:
      consumes:
      - application/json
      description: update user by ID
      operationId: update-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User entity
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/ent.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a user entity by ID
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
  OAuth2AccessCode:
    authorizationUrl: https://example.com/oauth/authorize
    flow: accessCode
    scopes:
      admin: ' Grants read and write access to administrative information'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Application:
    flow: application
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Implicit:
    authorizationUrl: https://example.com/oauth/authorize
    flow: implicit
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    type: oauth2
  OAuth2Password:
    flow: password
    scopes:
      admin: ' Grants read and write access to administrative information'
      read: ' Grants read access'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
