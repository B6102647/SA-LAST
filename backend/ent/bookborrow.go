// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/B6102647/app/ent/book"
	"github.com/B6102647/app/ent/bookborrow"
	"github.com/B6102647/app/ent/purpose"
	"github.com/B6102647/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
)

// BookBorrow is the model entity for the BookBorrow schema.
type BookBorrow struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ADDEDTIME holds the value of the "ADDED_TIME" field.
	ADDEDTIME time.Time `json:"ADDED_TIME,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BookBorrowQuery when eager-loading is set.
	Edges      BookBorrowEdges `json:"edges"`
	BOOK_ID    *int
	PURPOSE_ID *int
	User_ID    *int
}

// BookBorrowEdges holds the relations/edges for other nodes in the graph.
type BookBorrowEdges struct {
	// USER holds the value of the USER edge.
	USER *User
	// BOOK holds the value of the BOOK edge.
	BOOK *Book
	// PURPOSE holds the value of the PURPOSE edge.
	PURPOSE *Purpose
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// USEROrErr returns the USER value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BookBorrowEdges) USEROrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.USER == nil {
			// The edge USER was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.USER, nil
	}
	return nil, &NotLoadedError{edge: "USER"}
}

// BOOKOrErr returns the BOOK value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BookBorrowEdges) BOOKOrErr() (*Book, error) {
	if e.loadedTypes[1] {
		if e.BOOK == nil {
			// The edge BOOK was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: book.Label}
		}
		return e.BOOK, nil
	}
	return nil, &NotLoadedError{edge: "BOOK"}
}

// PURPOSEOrErr returns the PURPOSE value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BookBorrowEdges) PURPOSEOrErr() (*Purpose, error) {
	if e.loadedTypes[2] {
		if e.PURPOSE == nil {
			// The edge PURPOSE was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: purpose.Label}
		}
		return e.PURPOSE, nil
	}
	return nil, &NotLoadedError{edge: "PURPOSE"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BookBorrow) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullTime{},  // ADDED_TIME
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*BookBorrow) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // BOOK_ID
		&sql.NullInt64{}, // PURPOSE_ID
		&sql.NullInt64{}, // User_ID
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BookBorrow fields.
func (bb *BookBorrow) assignValues(values ...interface{}) error {
	if m, n := len(values), len(bookborrow.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	bb.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field ADDED_TIME", values[0])
	} else if value.Valid {
		bb.ADDEDTIME = value.Time
	}
	values = values[1:]
	if len(values) == len(bookborrow.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field BOOK_ID", value)
		} else if value.Valid {
			bb.BOOK_ID = new(int)
			*bb.BOOK_ID = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field PURPOSE_ID", value)
		} else if value.Valid {
			bb.PURPOSE_ID = new(int)
			*bb.PURPOSE_ID = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field User_ID", value)
		} else if value.Valid {
			bb.User_ID = new(int)
			*bb.User_ID = int(value.Int64)
		}
	}
	return nil
}

// QueryUSER queries the USER edge of the BookBorrow.
func (bb *BookBorrow) QueryUSER() *UserQuery {
	return (&BookBorrowClient{config: bb.config}).QueryUSER(bb)
}

// QueryBOOK queries the BOOK edge of the BookBorrow.
func (bb *BookBorrow) QueryBOOK() *BookQuery {
	return (&BookBorrowClient{config: bb.config}).QueryBOOK(bb)
}

// QueryPURPOSE queries the PURPOSE edge of the BookBorrow.
func (bb *BookBorrow) QueryPURPOSE() *PurposeQuery {
	return (&BookBorrowClient{config: bb.config}).QueryPURPOSE(bb)
}

// Update returns a builder for updating this BookBorrow.
// Note that, you need to call BookBorrow.Unwrap() before calling this method, if this BookBorrow
// was returned from a transaction, and the transaction was committed or rolled back.
func (bb *BookBorrow) Update() *BookBorrowUpdateOne {
	return (&BookBorrowClient{config: bb.config}).UpdateOne(bb)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (bb *BookBorrow) Unwrap() *BookBorrow {
	tx, ok := bb.config.driver.(*txDriver)
	if !ok {
		panic("ent: BookBorrow is not a transactional entity")
	}
	bb.config.driver = tx.drv
	return bb
}

// String implements the fmt.Stringer.
func (bb *BookBorrow) String() string {
	var builder strings.Builder
	builder.WriteString("BookBorrow(")
	builder.WriteString(fmt.Sprintf("id=%v", bb.ID))
	builder.WriteString(", ADDED_TIME=")
	builder.WriteString(bb.ADDEDTIME.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// BookBorrows is a parsable slice of BookBorrow.
type BookBorrows []*BookBorrow

func (bb BookBorrows) config(cfg config) {
	for _i := range bb {
		bb[_i].config = cfg
	}
}
