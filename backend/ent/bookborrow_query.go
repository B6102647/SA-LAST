// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/B6102647/app/ent/book"
	"github.com/B6102647/app/ent/bookborrow"
	"github.com/B6102647/app/ent/predicate"
	"github.com/B6102647/app/ent/purpose"
	"github.com/B6102647/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// BookBorrowQuery is the builder for querying BookBorrow entities.
type BookBorrowQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.BookBorrow
	// eager-loading edges.
	withUSER    *UserQuery
	withBOOK    *BookQuery
	withPURPOSE *PurposeQuery
	withFKs     bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (bbq *BookBorrowQuery) Where(ps ...predicate.BookBorrow) *BookBorrowQuery {
	bbq.predicates = append(bbq.predicates, ps...)
	return bbq
}

// Limit adds a limit step to the query.
func (bbq *BookBorrowQuery) Limit(limit int) *BookBorrowQuery {
	bbq.limit = &limit
	return bbq
}

// Offset adds an offset step to the query.
func (bbq *BookBorrowQuery) Offset(offset int) *BookBorrowQuery {
	bbq.offset = &offset
	return bbq
}

// Order adds an order step to the query.
func (bbq *BookBorrowQuery) Order(o ...OrderFunc) *BookBorrowQuery {
	bbq.order = append(bbq.order, o...)
	return bbq
}

// QueryUSER chains the current query on the USER edge.
func (bbq *BookBorrowQuery) QueryUSER() *UserQuery {
	query := &UserQuery{config: bbq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(bookborrow.Table, bookborrow.FieldID, bbq.sqlQuery()),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bookborrow.USERTable, bookborrow.USERColumn),
		)
		fromU = sqlgraph.SetNeighbors(bbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBOOK chains the current query on the BOOK edge.
func (bbq *BookBorrowQuery) QueryBOOK() *BookQuery {
	query := &BookQuery{config: bbq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(bookborrow.Table, bookborrow.FieldID, bbq.sqlQuery()),
			sqlgraph.To(book.Table, book.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bookborrow.BOOKTable, bookborrow.BOOKColumn),
		)
		fromU = sqlgraph.SetNeighbors(bbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPURPOSE chains the current query on the PURPOSE edge.
func (bbq *BookBorrowQuery) QueryPURPOSE() *PurposeQuery {
	query := &PurposeQuery{config: bbq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(bookborrow.Table, bookborrow.FieldID, bbq.sqlQuery()),
			sqlgraph.To(purpose.Table, purpose.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bookborrow.PURPOSETable, bookborrow.PURPOSEColumn),
		)
		fromU = sqlgraph.SetNeighbors(bbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first BookBorrow entity in the query. Returns *NotFoundError when no bookborrow was found.
func (bbq *BookBorrowQuery) First(ctx context.Context) (*BookBorrow, error) {
	bbs, err := bbq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(bbs) == 0 {
		return nil, &NotFoundError{bookborrow.Label}
	}
	return bbs[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (bbq *BookBorrowQuery) FirstX(ctx context.Context) *BookBorrow {
	bb, err := bbq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return bb
}

// FirstID returns the first BookBorrow id in the query. Returns *NotFoundError when no id was found.
func (bbq *BookBorrowQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = bbq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{bookborrow.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (bbq *BookBorrowQuery) FirstXID(ctx context.Context) int {
	id, err := bbq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only BookBorrow entity in the query, returns an error if not exactly one entity was returned.
func (bbq *BookBorrowQuery) Only(ctx context.Context) (*BookBorrow, error) {
	bbs, err := bbq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(bbs) {
	case 1:
		return bbs[0], nil
	case 0:
		return nil, &NotFoundError{bookborrow.Label}
	default:
		return nil, &NotSingularError{bookborrow.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (bbq *BookBorrowQuery) OnlyX(ctx context.Context) *BookBorrow {
	bb, err := bbq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return bb
}

// OnlyID returns the only BookBorrow id in the query, returns an error if not exactly one id was returned.
func (bbq *BookBorrowQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = bbq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{bookborrow.Label}
	default:
		err = &NotSingularError{bookborrow.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (bbq *BookBorrowQuery) OnlyIDX(ctx context.Context) int {
	id, err := bbq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of BookBorrows.
func (bbq *BookBorrowQuery) All(ctx context.Context) ([]*BookBorrow, error) {
	if err := bbq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return bbq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (bbq *BookBorrowQuery) AllX(ctx context.Context) []*BookBorrow {
	bbs, err := bbq.All(ctx)
	if err != nil {
		panic(err)
	}
	return bbs
}

// IDs executes the query and returns a list of BookBorrow ids.
func (bbq *BookBorrowQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := bbq.Select(bookborrow.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (bbq *BookBorrowQuery) IDsX(ctx context.Context) []int {
	ids, err := bbq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (bbq *BookBorrowQuery) Count(ctx context.Context) (int, error) {
	if err := bbq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return bbq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (bbq *BookBorrowQuery) CountX(ctx context.Context) int {
	count, err := bbq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (bbq *BookBorrowQuery) Exist(ctx context.Context) (bool, error) {
	if err := bbq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return bbq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (bbq *BookBorrowQuery) ExistX(ctx context.Context) bool {
	exist, err := bbq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (bbq *BookBorrowQuery) Clone() *BookBorrowQuery {
	return &BookBorrowQuery{
		config:     bbq.config,
		limit:      bbq.limit,
		offset:     bbq.offset,
		order:      append([]OrderFunc{}, bbq.order...),
		unique:     append([]string{}, bbq.unique...),
		predicates: append([]predicate.BookBorrow{}, bbq.predicates...),
		// clone intermediate query.
		sql:  bbq.sql.Clone(),
		path: bbq.path,
	}
}

//  WithUSER tells the query-builder to eager-loads the nodes that are connected to
// the "USER" edge. The optional arguments used to configure the query builder of the edge.
func (bbq *BookBorrowQuery) WithUSER(opts ...func(*UserQuery)) *BookBorrowQuery {
	query := &UserQuery{config: bbq.config}
	for _, opt := range opts {
		opt(query)
	}
	bbq.withUSER = query
	return bbq
}

//  WithBOOK tells the query-builder to eager-loads the nodes that are connected to
// the "BOOK" edge. The optional arguments used to configure the query builder of the edge.
func (bbq *BookBorrowQuery) WithBOOK(opts ...func(*BookQuery)) *BookBorrowQuery {
	query := &BookQuery{config: bbq.config}
	for _, opt := range opts {
		opt(query)
	}
	bbq.withBOOK = query
	return bbq
}

//  WithPURPOSE tells the query-builder to eager-loads the nodes that are connected to
// the "PURPOSE" edge. The optional arguments used to configure the query builder of the edge.
func (bbq *BookBorrowQuery) WithPURPOSE(opts ...func(*PurposeQuery)) *BookBorrowQuery {
	query := &PurposeQuery{config: bbq.config}
	for _, opt := range opts {
		opt(query)
	}
	bbq.withPURPOSE = query
	return bbq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ADDEDTIME time.Time `json:"ADDED_TIME,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.BookBorrow.Query().
//		GroupBy(bookborrow.FieldADDEDTIME).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (bbq *BookBorrowQuery) GroupBy(field string, fields ...string) *BookBorrowGroupBy {
	group := &BookBorrowGroupBy{config: bbq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := bbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return bbq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		ADDEDTIME time.Time `json:"ADDED_TIME,omitempty"`
//	}
//
//	client.BookBorrow.Query().
//		Select(bookborrow.FieldADDEDTIME).
//		Scan(ctx, &v)
//
func (bbq *BookBorrowQuery) Select(field string, fields ...string) *BookBorrowSelect {
	selector := &BookBorrowSelect{config: bbq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := bbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return bbq.sqlQuery(), nil
	}
	return selector
}

func (bbq *BookBorrowQuery) prepareQuery(ctx context.Context) error {
	if bbq.path != nil {
		prev, err := bbq.path(ctx)
		if err != nil {
			return err
		}
		bbq.sql = prev
	}
	return nil
}

func (bbq *BookBorrowQuery) sqlAll(ctx context.Context) ([]*BookBorrow, error) {
	var (
		nodes       = []*BookBorrow{}
		withFKs     = bbq.withFKs
		_spec       = bbq.querySpec()
		loadedTypes = [3]bool{
			bbq.withUSER != nil,
			bbq.withBOOK != nil,
			bbq.withPURPOSE != nil,
		}
	)
	if bbq.withUSER != nil || bbq.withBOOK != nil || bbq.withPURPOSE != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, bookborrow.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &BookBorrow{config: bbq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, bbq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := bbq.withUSER; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*BookBorrow)
		for i := range nodes {
			if fk := nodes[i].User_ID; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(user.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "User_ID" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.USER = n
			}
		}
	}

	if query := bbq.withBOOK; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*BookBorrow)
		for i := range nodes {
			if fk := nodes[i].BOOK_ID; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(book.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "BOOK_ID" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.BOOK = n
			}
		}
	}

	if query := bbq.withPURPOSE; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*BookBorrow)
		for i := range nodes {
			if fk := nodes[i].PURPOSE_ID; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(purpose.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "PURPOSE_ID" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.PURPOSE = n
			}
		}
	}

	return nodes, nil
}

func (bbq *BookBorrowQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := bbq.querySpec()
	return sqlgraph.CountNodes(ctx, bbq.driver, _spec)
}

func (bbq *BookBorrowQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := bbq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (bbq *BookBorrowQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bookborrow.Table,
			Columns: bookborrow.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bookborrow.FieldID,
			},
		},
		From:   bbq.sql,
		Unique: true,
	}
	if ps := bbq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := bbq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := bbq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := bbq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (bbq *BookBorrowQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(bbq.driver.Dialect())
	t1 := builder.Table(bookborrow.Table)
	selector := builder.Select(t1.Columns(bookborrow.Columns...)...).From(t1)
	if bbq.sql != nil {
		selector = bbq.sql
		selector.Select(selector.Columns(bookborrow.Columns...)...)
	}
	for _, p := range bbq.predicates {
		p(selector)
	}
	for _, p := range bbq.order {
		p(selector)
	}
	if offset := bbq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := bbq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// BookBorrowGroupBy is the builder for group-by BookBorrow entities.
type BookBorrowGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (bbgb *BookBorrowGroupBy) Aggregate(fns ...AggregateFunc) *BookBorrowGroupBy {
	bbgb.fns = append(bbgb.fns, fns...)
	return bbgb
}

// Scan applies the group-by query and scan the result into the given value.
func (bbgb *BookBorrowGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := bbgb.path(ctx)
	if err != nil {
		return err
	}
	bbgb.sql = query
	return bbgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (bbgb *BookBorrowGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := bbgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (bbgb *BookBorrowGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(bbgb.fields) > 1 {
		return nil, errors.New("ent: BookBorrowGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := bbgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (bbgb *BookBorrowGroupBy) StringsX(ctx context.Context) []string {
	v, err := bbgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (bbgb *BookBorrowGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = bbgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{bookborrow.Label}
	default:
		err = fmt.Errorf("ent: BookBorrowGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (bbgb *BookBorrowGroupBy) StringX(ctx context.Context) string {
	v, err := bbgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (bbgb *BookBorrowGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(bbgb.fields) > 1 {
		return nil, errors.New("ent: BookBorrowGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := bbgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (bbgb *BookBorrowGroupBy) IntsX(ctx context.Context) []int {
	v, err := bbgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (bbgb *BookBorrowGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = bbgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{bookborrow.Label}
	default:
		err = fmt.Errorf("ent: BookBorrowGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (bbgb *BookBorrowGroupBy) IntX(ctx context.Context) int {
	v, err := bbgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (bbgb *BookBorrowGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(bbgb.fields) > 1 {
		return nil, errors.New("ent: BookBorrowGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := bbgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (bbgb *BookBorrowGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := bbgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (bbgb *BookBorrowGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = bbgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{bookborrow.Label}
	default:
		err = fmt.Errorf("ent: BookBorrowGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (bbgb *BookBorrowGroupBy) Float64X(ctx context.Context) float64 {
	v, err := bbgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (bbgb *BookBorrowGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(bbgb.fields) > 1 {
		return nil, errors.New("ent: BookBorrowGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := bbgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (bbgb *BookBorrowGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := bbgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (bbgb *BookBorrowGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = bbgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{bookborrow.Label}
	default:
		err = fmt.Errorf("ent: BookBorrowGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (bbgb *BookBorrowGroupBy) BoolX(ctx context.Context) bool {
	v, err := bbgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (bbgb *BookBorrowGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := bbgb.sqlQuery().Query()
	if err := bbgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (bbgb *BookBorrowGroupBy) sqlQuery() *sql.Selector {
	selector := bbgb.sql
	columns := make([]string, 0, len(bbgb.fields)+len(bbgb.fns))
	columns = append(columns, bbgb.fields...)
	for _, fn := range bbgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(bbgb.fields...)
}

// BookBorrowSelect is the builder for select fields of BookBorrow entities.
type BookBorrowSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (bbs *BookBorrowSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := bbs.path(ctx)
	if err != nil {
		return err
	}
	bbs.sql = query
	return bbs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (bbs *BookBorrowSelect) ScanX(ctx context.Context, v interface{}) {
	if err := bbs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (bbs *BookBorrowSelect) Strings(ctx context.Context) ([]string, error) {
	if len(bbs.fields) > 1 {
		return nil, errors.New("ent: BookBorrowSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := bbs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (bbs *BookBorrowSelect) StringsX(ctx context.Context) []string {
	v, err := bbs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (bbs *BookBorrowSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = bbs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{bookborrow.Label}
	default:
		err = fmt.Errorf("ent: BookBorrowSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (bbs *BookBorrowSelect) StringX(ctx context.Context) string {
	v, err := bbs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (bbs *BookBorrowSelect) Ints(ctx context.Context) ([]int, error) {
	if len(bbs.fields) > 1 {
		return nil, errors.New("ent: BookBorrowSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := bbs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (bbs *BookBorrowSelect) IntsX(ctx context.Context) []int {
	v, err := bbs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (bbs *BookBorrowSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = bbs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{bookborrow.Label}
	default:
		err = fmt.Errorf("ent: BookBorrowSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (bbs *BookBorrowSelect) IntX(ctx context.Context) int {
	v, err := bbs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (bbs *BookBorrowSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(bbs.fields) > 1 {
		return nil, errors.New("ent: BookBorrowSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := bbs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (bbs *BookBorrowSelect) Float64sX(ctx context.Context) []float64 {
	v, err := bbs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (bbs *BookBorrowSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = bbs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{bookborrow.Label}
	default:
		err = fmt.Errorf("ent: BookBorrowSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (bbs *BookBorrowSelect) Float64X(ctx context.Context) float64 {
	v, err := bbs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (bbs *BookBorrowSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(bbs.fields) > 1 {
		return nil, errors.New("ent: BookBorrowSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := bbs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (bbs *BookBorrowSelect) BoolsX(ctx context.Context) []bool {
	v, err := bbs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (bbs *BookBorrowSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = bbs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{bookborrow.Label}
	default:
		err = fmt.Errorf("ent: BookBorrowSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (bbs *BookBorrowSelect) BoolX(ctx context.Context) bool {
	v, err := bbs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (bbs *BookBorrowSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := bbs.sqlQuery().Query()
	if err := bbs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (bbs *BookBorrowSelect) sqlQuery() sql.Querier {
	selector := bbs.sql
	selector.Select(selector.Columns(bbs.fields...)...)
	return selector
}
