// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/B6102647/app/ent/book"
	"github.com/B6102647/app/ent/bookborrow"
	"github.com/B6102647/app/ent/predicate"
	"github.com/B6102647/app/ent/purpose"
	"github.com/B6102647/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// BookBorrowUpdate is the builder for updating BookBorrow entities.
type BookBorrowUpdate struct {
	config
	hooks      []Hook
	mutation   *BookBorrowMutation
	predicates []predicate.BookBorrow
}

// Where adds a new predicate for the builder.
func (bbu *BookBorrowUpdate) Where(ps ...predicate.BookBorrow) *BookBorrowUpdate {
	bbu.predicates = append(bbu.predicates, ps...)
	return bbu
}

// SetADDEDTIME sets the ADDED_TIME field.
func (bbu *BookBorrowUpdate) SetADDEDTIME(t time.Time) *BookBorrowUpdate {
	bbu.mutation.SetADDEDTIME(t)
	return bbu
}

// SetOwnerID sets the Owner edge to User by id.
func (bbu *BookBorrowUpdate) SetOwnerID(id int) *BookBorrowUpdate {
	bbu.mutation.SetOwnerID(id)
	return bbu
}

// SetNillableOwnerID sets the Owner edge to User by id if the given value is not nil.
func (bbu *BookBorrowUpdate) SetNillableOwnerID(id *int) *BookBorrowUpdate {
	if id != nil {
		bbu = bbu.SetOwnerID(*id)
	}
	return bbu
}

// SetOwner sets the Owner edge to User.
func (bbu *BookBorrowUpdate) SetOwner(u *User) *BookBorrowUpdate {
	return bbu.SetOwnerID(u.ID)
}

// SetBOOKID sets the BOOK edge to Book by id.
func (bbu *BookBorrowUpdate) SetBOOKID(id int) *BookBorrowUpdate {
	bbu.mutation.SetBOOKID(id)
	return bbu
}

// SetNillableBOOKID sets the BOOK edge to Book by id if the given value is not nil.
func (bbu *BookBorrowUpdate) SetNillableBOOKID(id *int) *BookBorrowUpdate {
	if id != nil {
		bbu = bbu.SetBOOKID(*id)
	}
	return bbu
}

// SetBOOK sets the BOOK edge to Book.
func (bbu *BookBorrowUpdate) SetBOOK(b *Book) *BookBorrowUpdate {
	return bbu.SetBOOKID(b.ID)
}

// SetPURPOSEID sets the PURPOSE edge to Purpose by id.
func (bbu *BookBorrowUpdate) SetPURPOSEID(id int) *BookBorrowUpdate {
	bbu.mutation.SetPURPOSEID(id)
	return bbu
}

// SetNillablePURPOSEID sets the PURPOSE edge to Purpose by id if the given value is not nil.
func (bbu *BookBorrowUpdate) SetNillablePURPOSEID(id *int) *BookBorrowUpdate {
	if id != nil {
		bbu = bbu.SetPURPOSEID(*id)
	}
	return bbu
}

// SetPURPOSE sets the PURPOSE edge to Purpose.
func (bbu *BookBorrowUpdate) SetPURPOSE(p *Purpose) *BookBorrowUpdate {
	return bbu.SetPURPOSEID(p.ID)
}

// Mutation returns the BookBorrowMutation object of the builder.
func (bbu *BookBorrowUpdate) Mutation() *BookBorrowMutation {
	return bbu.mutation
}

// ClearOwner clears the Owner edge to User.
func (bbu *BookBorrowUpdate) ClearOwner() *BookBorrowUpdate {
	bbu.mutation.ClearOwner()
	return bbu
}

// ClearBOOK clears the BOOK edge to Book.
func (bbu *BookBorrowUpdate) ClearBOOK() *BookBorrowUpdate {
	bbu.mutation.ClearBOOK()
	return bbu
}

// ClearPURPOSE clears the PURPOSE edge to Purpose.
func (bbu *BookBorrowUpdate) ClearPURPOSE() *BookBorrowUpdate {
	bbu.mutation.ClearPURPOSE()
	return bbu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (bbu *BookBorrowUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(bbu.hooks) == 0 {
		affected, err = bbu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BookBorrowMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bbu.mutation = mutation
			affected, err = bbu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bbu.hooks) - 1; i >= 0; i-- {
			mut = bbu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bbu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bbu *BookBorrowUpdate) SaveX(ctx context.Context) int {
	affected, err := bbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bbu *BookBorrowUpdate) Exec(ctx context.Context) error {
	_, err := bbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bbu *BookBorrowUpdate) ExecX(ctx context.Context) {
	if err := bbu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bbu *BookBorrowUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bookborrow.Table,
			Columns: bookborrow.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bookborrow.FieldID,
			},
		},
	}
	if ps := bbu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bbu.mutation.ADDEDTIME(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bookborrow.FieldADDEDTIME,
		})
	}
	if bbu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookborrow.OwnerTable,
			Columns: []string{bookborrow.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bbu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookborrow.OwnerTable,
			Columns: []string{bookborrow.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bbu.mutation.BOOKCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookborrow.BOOKTable,
			Columns: []string{bookborrow.BOOKColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: book.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bbu.mutation.BOOKIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookborrow.BOOKTable,
			Columns: []string{bookborrow.BOOKColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: book.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bbu.mutation.PURPOSECleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookborrow.PURPOSETable,
			Columns: []string{bookborrow.PURPOSEColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: purpose.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bbu.mutation.PURPOSEIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookborrow.PURPOSETable,
			Columns: []string{bookborrow.PURPOSEColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: purpose.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bookborrow.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// BookBorrowUpdateOne is the builder for updating a single BookBorrow entity.
type BookBorrowUpdateOne struct {
	config
	hooks    []Hook
	mutation *BookBorrowMutation
}

// SetADDEDTIME sets the ADDED_TIME field.
func (bbuo *BookBorrowUpdateOne) SetADDEDTIME(t time.Time) *BookBorrowUpdateOne {
	bbuo.mutation.SetADDEDTIME(t)
	return bbuo
}

// SetOwnerID sets the Owner edge to User by id.
func (bbuo *BookBorrowUpdateOne) SetOwnerID(id int) *BookBorrowUpdateOne {
	bbuo.mutation.SetOwnerID(id)
	return bbuo
}

// SetNillableOwnerID sets the Owner edge to User by id if the given value is not nil.
func (bbuo *BookBorrowUpdateOne) SetNillableOwnerID(id *int) *BookBorrowUpdateOne {
	if id != nil {
		bbuo = bbuo.SetOwnerID(*id)
	}
	return bbuo
}

// SetOwner sets the Owner edge to User.
func (bbuo *BookBorrowUpdateOne) SetOwner(u *User) *BookBorrowUpdateOne {
	return bbuo.SetOwnerID(u.ID)
}

// SetBOOKID sets the BOOK edge to Book by id.
func (bbuo *BookBorrowUpdateOne) SetBOOKID(id int) *BookBorrowUpdateOne {
	bbuo.mutation.SetBOOKID(id)
	return bbuo
}

// SetNillableBOOKID sets the BOOK edge to Book by id if the given value is not nil.
func (bbuo *BookBorrowUpdateOne) SetNillableBOOKID(id *int) *BookBorrowUpdateOne {
	if id != nil {
		bbuo = bbuo.SetBOOKID(*id)
	}
	return bbuo
}

// SetBOOK sets the BOOK edge to Book.
func (bbuo *BookBorrowUpdateOne) SetBOOK(b *Book) *BookBorrowUpdateOne {
	return bbuo.SetBOOKID(b.ID)
}

// SetPURPOSEID sets the PURPOSE edge to Purpose by id.
func (bbuo *BookBorrowUpdateOne) SetPURPOSEID(id int) *BookBorrowUpdateOne {
	bbuo.mutation.SetPURPOSEID(id)
	return bbuo
}

// SetNillablePURPOSEID sets the PURPOSE edge to Purpose by id if the given value is not nil.
func (bbuo *BookBorrowUpdateOne) SetNillablePURPOSEID(id *int) *BookBorrowUpdateOne {
	if id != nil {
		bbuo = bbuo.SetPURPOSEID(*id)
	}
	return bbuo
}

// SetPURPOSE sets the PURPOSE edge to Purpose.
func (bbuo *BookBorrowUpdateOne) SetPURPOSE(p *Purpose) *BookBorrowUpdateOne {
	return bbuo.SetPURPOSEID(p.ID)
}

// Mutation returns the BookBorrowMutation object of the builder.
func (bbuo *BookBorrowUpdateOne) Mutation() *BookBorrowMutation {
	return bbuo.mutation
}

// ClearOwner clears the Owner edge to User.
func (bbuo *BookBorrowUpdateOne) ClearOwner() *BookBorrowUpdateOne {
	bbuo.mutation.ClearOwner()
	return bbuo
}

// ClearBOOK clears the BOOK edge to Book.
func (bbuo *BookBorrowUpdateOne) ClearBOOK() *BookBorrowUpdateOne {
	bbuo.mutation.ClearBOOK()
	return bbuo
}

// ClearPURPOSE clears the PURPOSE edge to Purpose.
func (bbuo *BookBorrowUpdateOne) ClearPURPOSE() *BookBorrowUpdateOne {
	bbuo.mutation.ClearPURPOSE()
	return bbuo
}

// Save executes the query and returns the updated entity.
func (bbuo *BookBorrowUpdateOne) Save(ctx context.Context) (*BookBorrow, error) {

	var (
		err  error
		node *BookBorrow
	)
	if len(bbuo.hooks) == 0 {
		node, err = bbuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BookBorrowMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bbuo.mutation = mutation
			node, err = bbuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(bbuo.hooks) - 1; i >= 0; i-- {
			mut = bbuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bbuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (bbuo *BookBorrowUpdateOne) SaveX(ctx context.Context) *BookBorrow {
	bb, err := bbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return bb
}

// Exec executes the query on the entity.
func (bbuo *BookBorrowUpdateOne) Exec(ctx context.Context) error {
	_, err := bbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bbuo *BookBorrowUpdateOne) ExecX(ctx context.Context) {
	if err := bbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bbuo *BookBorrowUpdateOne) sqlSave(ctx context.Context) (bb *BookBorrow, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bookborrow.Table,
			Columns: bookborrow.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bookborrow.FieldID,
			},
		},
	}
	id, ok := bbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing BookBorrow.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := bbuo.mutation.ADDEDTIME(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bookborrow.FieldADDEDTIME,
		})
	}
	if bbuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookborrow.OwnerTable,
			Columns: []string{bookborrow.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bbuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookborrow.OwnerTable,
			Columns: []string{bookborrow.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bbuo.mutation.BOOKCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookborrow.BOOKTable,
			Columns: []string{bookborrow.BOOKColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: book.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bbuo.mutation.BOOKIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookborrow.BOOKTable,
			Columns: []string{bookborrow.BOOKColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: book.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bbuo.mutation.PURPOSECleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookborrow.PURPOSETable,
			Columns: []string{bookborrow.PURPOSEColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: purpose.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bbuo.mutation.PURPOSEIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookborrow.PURPOSETable,
			Columns: []string{bookborrow.PURPOSEColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: purpose.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	bb = &BookBorrow{config: bbuo.config}
	_spec.Assign = bb.assignValues
	_spec.ScanValues = bb.scanValues()
	if err = sqlgraph.UpdateNode(ctx, bbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bookborrow.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return bb, nil
}
