// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/B6102647/app/ent/book"
	"github.com/B6102647/app/ent/status"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Book is the model entity for the Book schema.
type Book struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// BOOKNAME holds the value of the "BOOK_NAME" field.
	BOOKNAME string `json:"BOOK_NAME,omitempty"`
	// USERNAME holds the value of the "USER_NAME" field.
	USERNAME string `json:"USER_NAME,omitempty"`
	// CATEGORY holds the value of the "CATEGORY" field.
	CATEGORY string `json:"CATEGORY,omitempty"`
	// Author holds the value of the "Author" field.
	Author string `json:"Author,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BookQuery when eager-loading is set.
	Edges     BookEdges `json:"edges"`
	STATUS_ID *int
}

// BookEdges holds the relations/edges for other nodes in the graph.
type BookEdges struct {
	// Booklist holds the value of the Booklist edge.
	Booklist []*BookBorrow
	// Status holds the value of the Status edge.
	Status *Status
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BooklistOrErr returns the Booklist value or an error if the edge
// was not loaded in eager-loading.
func (e BookEdges) BooklistOrErr() ([]*BookBorrow, error) {
	if e.loadedTypes[0] {
		return e.Booklist, nil
	}
	return nil, &NotLoadedError{edge: "Booklist"}
}

// StatusOrErr returns the Status value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BookEdges) StatusOrErr() (*Status, error) {
	if e.loadedTypes[1] {
		if e.Status == nil {
			// The edge Status was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: status.Label}
		}
		return e.Status, nil
	}
	return nil, &NotLoadedError{edge: "Status"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Book) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // BOOK_NAME
		&sql.NullString{}, // USER_NAME
		&sql.NullString{}, // CATEGORY
		&sql.NullString{}, // Author
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Book) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // STATUS_ID
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Book fields.
func (b *Book) assignValues(values ...interface{}) error {
	if m, n := len(values), len(book.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	b.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field BOOK_NAME", values[0])
	} else if value.Valid {
		b.BOOKNAME = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field USER_NAME", values[1])
	} else if value.Valid {
		b.USERNAME = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field CATEGORY", values[2])
	} else if value.Valid {
		b.CATEGORY = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Author", values[3])
	} else if value.Valid {
		b.Author = value.String
	}
	values = values[4:]
	if len(values) == len(book.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field STATUS_ID", value)
		} else if value.Valid {
			b.STATUS_ID = new(int)
			*b.STATUS_ID = int(value.Int64)
		}
	}
	return nil
}

// QueryBooklist queries the Booklist edge of the Book.
func (b *Book) QueryBooklist() *BookBorrowQuery {
	return (&BookClient{config: b.config}).QueryBooklist(b)
}

// QueryStatus queries the Status edge of the Book.
func (b *Book) QueryStatus() *StatusQuery {
	return (&BookClient{config: b.config}).QueryStatus(b)
}

// Update returns a builder for updating this Book.
// Note that, you need to call Book.Unwrap() before calling this method, if this Book
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Book) Update() *BookUpdateOne {
	return (&BookClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (b *Book) Unwrap() *Book {
	tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Book is not a transactional entity")
	}
	b.config.driver = tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Book) String() string {
	var builder strings.Builder
	builder.WriteString("Book(")
	builder.WriteString(fmt.Sprintf("id=%v", b.ID))
	builder.WriteString(", BOOK_NAME=")
	builder.WriteString(b.BOOKNAME)
	builder.WriteString(", USER_NAME=")
	builder.WriteString(b.USERNAME)
	builder.WriteString(", CATEGORY=")
	builder.WriteString(b.CATEGORY)
	builder.WriteString(", Author=")
	builder.WriteString(b.Author)
	builder.WriteByte(')')
	return builder.String()
}

// Books is a parsable slice of Book.
type Books []*Book

func (b Books) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
